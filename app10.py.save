###########################################
# imports dependencies
###########################################
import datetime
import json
import datetime as dt
import numpy as np
import pandas as pd
import sqlalchemy
from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import Session
from sqlalchemy import create_engine, func
from flask import Flask, jsonify

###########################################
# initializes database
###########################################

engine = create_engine("sqlite:///database.sqlite")
Base = automap_base()
Base.prepare(engine, reflect=True)

###########################################
# creates references to Info
# and Station tables
###########################################

Info = Base.classes.link

session = Session(engine)

####################################
# initializes Flask app
####################################
app = Flask(__name__)

################################
# initializes Flask Routes
################################
"""
"""
@app.route("/Items")
def items():
    """Return Dates and Temp from the last year."""
    results = session.query(Info.Date, Info.id).\
        filter(Info.Date >= "2016-10-30", Info.Date <= "2017-01-23").\
        all()
# creates JSONified list
    info_list = [results]

    print( jsonify(info_list))
    return jsonify(info_list)


@app.route("/popular")
def popular():
    import pandas as pd
    from sqlalchemy import select
    """Return a list of items names."""
    # Use Pandas to perform the sql query
    stmt = session.query(Info).statement
    df = pd.read_sql_query(stmt, session.bind)
    from sqlalchemy import func
    foo= session.query(Info.Item,func.count(Info.Item)).group_by(Info.Item).all()

    print(list(foo))
#    return jsonify(list(foo))
    return render_template("index10.html", data=foo)
import datetime
import json

@app.route("/groupby")
def groupby():
#    foo=session.query(Info.Item,func.count(Info.Item).groupby(Info.Item)).all()
#    foo=session.query(func.count(Info.Item).label('count'))
    from sqlalchemy import func
    foo = session.query(func.count(Info.Transection),Info.Item).\
    group_by(Info.Item).order_by(Info.Item).all()
    foo2 = session.query(func.count(Info.Date),Info.Item).\
    group_by(Info.Item).order_by(Info.Item).all()
    data = session.query(func.count(Info.Item),Info.Date).\
    group_by(Info.Date).order_by(Info.Date).all()
    values1 = [data[x][0] for x in range(len(data))]
    keys1 = [data[x][1] for x in range(len(data))]
    d = {'Date': [], 'Values': []}
    d['Date'].append(keys1)
    d['Values'].append(values1)
#    dict_list = [ {"Date": str(keys)}, {"Values": values}]
#    chart_data=json.dumps(dict_list, indent=2)
#   chart_data=json.dumps(data, default=datetime_handler)
#    data = {'chart_data': dict_list}
    print(d)
    return render_template("index10.html", data=d)
#    return jsonify(dict_list)
#   return jsonify(data)
"""
"""
"""
result = db.session.query(Samples.otu_id, sample_query).\
    order_by(desc(sample_query)).all()
    otu_ids = [result[x][0] for x in range(len(result))]
    sample_values = [result[x][1] for x in range(len(result))]
    dict_list = [{"otu_ids": otu_ids}, {"sample_values": sample_values}]
    return jsonify(dict_list)
#    return jsonify(list(data))
#    data= jsonify(data)
#    return render_template("index10.html", data=data)
"""
"""
def index():
    df = pd.read_csv('data').drop('Open', axis=1)
    chart_data = df.to_dict(orient='records')
    chart_data = json.dumps(chart_data, indent=2)
    data = {'chart_data': chart_data}
    return render_template("index.html", data=data)
"""
if __name__ == '__main__':
    app.run(debug=True)
